{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17b16yPX5CFu1vkNz5dN_bFo9bJiMu4C6","timestamp":1736317649985}],"authorship_tag":"ABX9TyNrDqmFQHBEsaoOcVlIXyCp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JxTxFNImsi_j","executionInfo":{"status":"ok","timestamp":1736580524932,"user_tz":-540,"elapsed":21936,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"b387dff2-47a7-4d00-c639-c44d9c7205cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","source":["import pandas as pd\n","\n","file_path = '/content/drive/My Drive/hotel_service/data/test.csv'\n","test = pd.read_csv(file_path, low_memory=False)\n","\n","test.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":516},"collapsed":true,"id":"R4nu-gdNtEPC","executionInfo":{"status":"ok","timestamp":1736580529950,"user_tz":-540,"elapsed":2376,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"a58c2f30-75cd-4f37-f729-69a6b8747fd7"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   id  accommodates                                          amenities  \\\n","0   0             6  {TV,\"Cable TV\",\"Wireless Internet\",\"Air condit...   \n","1   1             3  {TV,\"Cable TV\",Internet,\"Wireless Internet\",\"A...   \n","2   2             2  {TV,\"Wireless Internet\",\"Air conditioning\",Kit...   \n","3   3             4  {TV,\"Cable TV\",Internet,\"Wireless Internet\",\"A...   \n","4   4             3  {TV,Internet,\"Wireless Internet\",\"Air conditio...   \n","\n","   bathrooms  bed_type  bedrooms  beds cancellation_policy    city  \\\n","0        2.0  Real Bed       2.0   2.0              strict  Boston   \n","1        1.0  Real Bed       1.0   1.0            moderate      LA   \n","2        1.0  Real Bed       0.0   1.0            flexible     NYC   \n","3        1.0  Real Bed       1.0   2.0              strict     NYC   \n","4        1.5  Real Bed       1.0   2.0              strict      LA   \n","\n","  cleaning_fee  ...   latitude   longitude  \\\n","0            t  ...  42.359278  -71.069962   \n","1            t  ...  34.084747 -118.367355   \n","2            f  ...  40.720541  -73.959192   \n","3            f  ...  40.681117  -73.944091   \n","4            t  ...  34.150995 -118.409359   \n","\n","                                                name       neighbourhood  \\\n","0             Gorgeous 2BR/2BA Duplex in Beacon Hill         Beacon Hill   \n","1        Luxury 1 Bedroom West Hollywood City Center      West Hollywood   \n","2  Bedroom with Patio in Prime Williamsburg Locat...        Williamsburg   \n","3                         Cozy apartment in Brooklyn  Bedford-Stuyvesant   \n","4                 Cozy, sunny, pet friendly loft/apt                 NaN   \n","\n","  number_of_reviews property_type review_scores_rating        room_type  \\\n","0                58         House                 90.0  Entire home/apt   \n","1                 4    Guesthouse                100.0  Entire home/apt   \n","2                 0     Apartment                  NaN     Private room   \n","3                 0     Apartment                  NaN  Entire home/apt   \n","4                 6          Loft                 92.0  Entire home/apt   \n","\n","                                       thumbnail_url  zipcode  \n","0  https://a0.muscache.com/im/pictures/7e4808b4-5...    02114  \n","1  https://a0.muscache.com/im/pictures/5392fbd6-6...    90046  \n","2  https://a0.muscache.com/im/pictures/544d3b89-d...  11249.0  \n","3  https://a0.muscache.com/im/pictures/26baf7ba-0...    11216  \n","4  https://a0.muscache.com/im/pictures/86107545/9...    91604  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-deda5195-eff5-4816-9cfa-1be0fcaa0ab6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>accommodates</th>\n","      <th>amenities</th>\n","      <th>bathrooms</th>\n","      <th>bed_type</th>\n","      <th>bedrooms</th>\n","      <th>beds</th>\n","      <th>cancellation_policy</th>\n","      <th>city</th>\n","      <th>cleaning_fee</th>\n","      <th>...</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>name</th>\n","      <th>neighbourhood</th>\n","      <th>number_of_reviews</th>\n","      <th>property_type</th>\n","      <th>review_scores_rating</th>\n","      <th>room_type</th>\n","      <th>thumbnail_url</th>\n","      <th>zipcode</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>{TV,\"Cable TV\",\"Wireless Internet\",\"Air condit...</td>\n","      <td>2.0</td>\n","      <td>Real Bed</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>strict</td>\n","      <td>Boston</td>\n","      <td>t</td>\n","      <td>...</td>\n","      <td>42.359278</td>\n","      <td>-71.069962</td>\n","      <td>Gorgeous 2BR/2BA Duplex in Beacon Hill</td>\n","      <td>Beacon Hill</td>\n","      <td>58</td>\n","      <td>House</td>\n","      <td>90.0</td>\n","      <td>Entire home/apt</td>\n","      <td>https://a0.muscache.com/im/pictures/7e4808b4-5...</td>\n","      <td>02114</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>{TV,\"Cable TV\",Internet,\"Wireless Internet\",\"A...</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>moderate</td>\n","      <td>LA</td>\n","      <td>t</td>\n","      <td>...</td>\n","      <td>34.084747</td>\n","      <td>-118.367355</td>\n","      <td>Luxury 1 Bedroom West Hollywood City Center</td>\n","      <td>West Hollywood</td>\n","      <td>4</td>\n","      <td>Guesthouse</td>\n","      <td>100.0</td>\n","      <td>Entire home/apt</td>\n","      <td>https://a0.muscache.com/im/pictures/5392fbd6-6...</td>\n","      <td>90046</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>{TV,\"Wireless Internet\",\"Air conditioning\",Kit...</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>flexible</td>\n","      <td>NYC</td>\n","      <td>f</td>\n","      <td>...</td>\n","      <td>40.720541</td>\n","      <td>-73.959192</td>\n","      <td>Bedroom with Patio in Prime Williamsburg Locat...</td>\n","      <td>Williamsburg</td>\n","      <td>0</td>\n","      <td>Apartment</td>\n","      <td>NaN</td>\n","      <td>Private room</td>\n","      <td>https://a0.muscache.com/im/pictures/544d3b89-d...</td>\n","      <td>11249.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>{TV,\"Cable TV\",Internet,\"Wireless Internet\",\"A...</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>strict</td>\n","      <td>NYC</td>\n","      <td>f</td>\n","      <td>...</td>\n","      <td>40.681117</td>\n","      <td>-73.944091</td>\n","      <td>Cozy apartment in Brooklyn</td>\n","      <td>Bedford-Stuyvesant</td>\n","      <td>0</td>\n","      <td>Apartment</td>\n","      <td>NaN</td>\n","      <td>Entire home/apt</td>\n","      <td>https://a0.muscache.com/im/pictures/26baf7ba-0...</td>\n","      <td>11216</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>{TV,Internet,\"Wireless Internet\",\"Air conditio...</td>\n","      <td>1.5</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>strict</td>\n","      <td>LA</td>\n","      <td>t</td>\n","      <td>...</td>\n","      <td>34.150995</td>\n","      <td>-118.409359</td>\n","      <td>Cozy, sunny, pet friendly loft/apt</td>\n","      <td>NaN</td>\n","      <td>6</td>\n","      <td>Loft</td>\n","      <td>92.0</td>\n","      <td>Entire home/apt</td>\n","      <td>https://a0.muscache.com/im/pictures/86107545/9...</td>\n","      <td>91604</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-deda5195-eff5-4816-9cfa-1be0fcaa0ab6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-deda5195-eff5-4816-9cfa-1be0fcaa0ab6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-deda5195-eff5-4816-9cfa-1be0fcaa0ab6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-185bbba4-53cc-4c9a-8bd0-03e0d8239b12\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-185bbba4-53cc-4c9a-8bd0-03e0d8239b12')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-185bbba4-53cc-4c9a-8bd0-03e0d8239b12 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":[],"metadata":{"id":"JBerFwiez_O1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"j8NnHnrPuoJQ","executionInfo":{"status":"ok","timestamp":1736317955271,"user_tz":-540,"elapsed":242,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"cd37deae-9b1c-4ad7-b5e5-4e02e96d29bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18528 entries, 0 to 18527\n","Data columns (total 28 columns):\n"," #   Column                  Non-Null Count  Dtype  \n","---  ------                  --------------  -----  \n"," 0   id                      18528 non-null  int64  \n"," 1   accommodates            18528 non-null  int64  \n"," 2   amenities               18528 non-null  object \n"," 3   bathrooms               18475 non-null  float64\n"," 4   bed_type                18528 non-null  object \n"," 5   bedrooms                18508 non-null  float64\n"," 6   beds                    18493 non-null  float64\n"," 7   cancellation_policy     18528 non-null  object \n"," 8   city                    18528 non-null  object \n"," 9   cleaning_fee            18528 non-null  object \n"," 10  description             18528 non-null  object \n"," 11  first_review            14572 non-null  object \n"," 12  host_has_profile_pic    18488 non-null  object \n"," 13  host_identity_verified  18488 non-null  object \n"," 14  host_response_rate      13933 non-null  object \n"," 15  host_since              18488 non-null  object \n"," 16  instant_bookable        18528 non-null  object \n"," 17  last_review             14581 non-null  object \n"," 18  latitude                18528 non-null  float64\n"," 19  longitude               18528 non-null  float64\n"," 20  name                    18528 non-null  object \n"," 21  neighbourhood           16816 non-null  object \n"," 22  number_of_reviews       18528 non-null  int64  \n"," 23  property_type           18528 non-null  object \n"," 24  review_scores_rating    14362 non-null  float64\n"," 25  room_type               18528 non-null  object \n"," 26  thumbnail_url           16457 non-null  object \n"," 27  zipcode                 18278 non-null  object \n","dtypes: float64(6), int64(3), object(19)\n","memory usage: 4.0+ MB\n"]}]},{"cell_type":"code","source":["test.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"collapsed":true,"id":"Ra6tNlrpv1am","executionInfo":{"status":"ok","timestamp":1736317963976,"user_tz":-540,"elapsed":275,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"236b57a7-a457-4e7f-c3e3-4680197d9e7e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 id  accommodates     bathrooms      bedrooms          beds  \\\n","count  18528.000000  18528.000000  18475.000000  18508.000000  18493.000000   \n","mean    9263.500000      3.161863      1.231773      1.267236      1.708160   \n","std     5348.717229      2.155397      0.578944      0.860580      1.243063   \n","min        0.000000      1.000000      0.000000      0.000000      0.000000   \n","25%     4631.750000      2.000000      1.000000      1.000000      1.000000   \n","50%     9263.500000      2.000000      1.000000      1.000000      1.000000   \n","75%    13895.250000      4.000000      1.000000      1.000000      2.000000   \n","max    18527.000000     16.000000      8.000000     10.000000     16.000000   \n","\n","           latitude     longitude  number_of_reviews  review_scores_rating  \n","count  18528.000000  18528.000000       18528.000000          14362.000000  \n","mean      38.431396    -92.562881          20.790425             94.035719  \n","std        3.078096     21.757419          37.457273              7.938919  \n","min       33.343011   -122.510940           0.000000             20.000000  \n","25%       34.126672   -118.344098           1.000000             92.000000  \n","50%       40.658229    -77.000323           6.000000             96.000000  \n","75%       40.745958    -73.954432          23.000000            100.000000  \n","max       42.390248    -70.985047         451.000000            100.000000  "],"text/html":["\n","  <div id=\"df-ff69e4f2-6307-425e-aa94-3a3760e70fbf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>accommodates</th>\n","      <th>bathrooms</th>\n","      <th>bedrooms</th>\n","      <th>beds</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>number_of_reviews</th>\n","      <th>review_scores_rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>18528.000000</td>\n","      <td>18528.000000</td>\n","      <td>18475.000000</td>\n","      <td>18508.000000</td>\n","      <td>18493.000000</td>\n","      <td>18528.000000</td>\n","      <td>18528.000000</td>\n","      <td>18528.000000</td>\n","      <td>14362.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>9263.500000</td>\n","      <td>3.161863</td>\n","      <td>1.231773</td>\n","      <td>1.267236</td>\n","      <td>1.708160</td>\n","      <td>38.431396</td>\n","      <td>-92.562881</td>\n","      <td>20.790425</td>\n","      <td>94.035719</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5348.717229</td>\n","      <td>2.155397</td>\n","      <td>0.578944</td>\n","      <td>0.860580</td>\n","      <td>1.243063</td>\n","      <td>3.078096</td>\n","      <td>21.757419</td>\n","      <td>37.457273</td>\n","      <td>7.938919</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>33.343011</td>\n","      <td>-122.510940</td>\n","      <td>0.000000</td>\n","      <td>20.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>4631.750000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>34.126672</td>\n","      <td>-118.344098</td>\n","      <td>1.000000</td>\n","      <td>92.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>9263.500000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>40.658229</td>\n","      <td>-77.000323</td>\n","      <td>6.000000</td>\n","      <td>96.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>13895.250000</td>\n","      <td>4.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>40.745958</td>\n","      <td>-73.954432</td>\n","      <td>23.000000</td>\n","      <td>100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>18527.000000</td>\n","      <td>16.000000</td>\n","      <td>8.000000</td>\n","      <td>10.000000</td>\n","      <td>16.000000</td>\n","      <td>42.390248</td>\n","      <td>-70.985047</td>\n","      <td>451.000000</td>\n","      <td>100.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff69e4f2-6307-425e-aa94-3a3760e70fbf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ff69e4f2-6307-425e-aa94-3a3760e70fbf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ff69e4f2-6307-425e-aa94-3a3760e70fbf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0a782bb6-e24e-4190-b70f-fbb74a9e284d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a782bb6-e24e-4190-b70f-fbb74a9e284d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0a782bb6-e24e-4190-b70f-fbb74a9e284d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"test\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6677.361869050404,\n        \"min\": 0.0,\n        \"max\": 18528.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          18528.0,\n          9263.5,\n          13895.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"accommodates\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6549.1077603983385,\n        \"min\": 1.0,\n        \"max\": 18528.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          18528.0,\n          3.161863126079447,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bathrooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6531.252348892743,\n        \"min\": 0.0,\n        \"max\": 18475.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          18475.0,\n          1.2317726657645467,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bedrooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6542.802876177699,\n        \"min\": 0.0,\n        \"max\": 18508.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          18508.0,\n          1.2672357899286795,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"beds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6537.105729739408,\n        \"min\": 0.0,\n        \"max\": 18493.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          18493.0,\n          1.7081598442653978,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6538.892750142771,\n        \"min\": 3.0780958738219697,\n        \"max\": 18528.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          38.43139645586739,\n          40.65822881675318,\n          18528.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6577.738149574805,\n        \"min\": -122.51094046823688,\n        \"max\": 18528.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -92.56288128052186,\n          -77.00032253948011,\n          18528.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"number_of_reviews\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6525.199443486414,\n        \"min\": 0.0,\n        \"max\": 18528.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          20.79042530224525,\n          6.0,\n          18528.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review_scores_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5052.115201111024,\n        \"min\": 7.938919195531488,\n        \"max\": 14362.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          14362.0,\n          94.03571925915611,\n          96.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["### 欠損値の数と割合を確認する"],"metadata":{"id":"SxR8p5UVYaYL"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# 欠損値の数と割合の計算\n","missing_values_count = test.isnull().sum()\n","missing_percentage = (missing_values_count / len(test)) * 100\n","\n","# 正しいデータフレームの作成\n","missing_data = pd.DataFrame({\n","    '欠損数': missing_values_count,\n","    '欠損率(%)': missing_percentage\n","}).sort_values(by='欠損率(%)', ascending=False)\n","\n","# 上位30件の表示\n","print(missing_data.head(30))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"vfJaKCPWw_Wv","executionInfo":{"status":"ok","timestamp":1736318007280,"user_tz":-540,"elapsed":261,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"14a1f383-589c-444d-f757-9dc91720084b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                         欠損数     欠損率(%)\n","host_response_rate      4595  24.800302\n","review_scores_rating    4166  22.484888\n","first_review            3956  21.351468\n","last_review             3947  21.302893\n","thumbnail_url           2071  11.177677\n","neighbourhood           1712   9.240069\n","zipcode                  250   1.349309\n","bathrooms                 53   0.286054\n","host_has_profile_pic      40   0.215889\n","host_identity_verified    40   0.215889\n","host_since                40   0.215889\n","beds                      35   0.188903\n","bedrooms                  20   0.107945\n","name                       0   0.000000\n","amenities                  0   0.000000\n","room_type                  0   0.000000\n","property_type              0   0.000000\n","number_of_reviews          0   0.000000\n","bed_type                   0   0.000000\n","cancellation_policy        0   0.000000\n","longitude                  0   0.000000\n","latitude                   0   0.000000\n","city                       0   0.000000\n","instant_bookable           0   0.000000\n","accommodates               0   0.000000\n","description                0   0.000000\n","cleaning_fee               0   0.000000\n","id                         0   0.000000\n"]}]},{"cell_type":"markdown","source":["### 不要な列を削除する"],"metadata":{"id":"2x5uI9sCaGnq"}},{"cell_type":"code","source":["# 削除対象のリスト\n","columns_to_drop = ['description', 'thumbnail_url', 'name']\n","\n","# データフレームから削除\n","test = test.drop(columns=columns_to_drop)\n","\n","# 削除結果の確認\n","print(\"削除後のカラム数:\", test.shape[1])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vKt1iAWR9vOl","executionInfo":{"status":"ok","timestamp":1736580540226,"user_tz":-540,"elapsed":247,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"86c7e782-1fad-40a2-bcf7-3d82b95432ab"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["削除後のカラム数: 25\n"]}]},{"cell_type":"markdown","source":["### 基本情報を確認する"],"metadata":{"id":"1S4m7Q69DJSk"}},{"cell_type":"code","source":["def data_summary(df):\n","    print(\"データの基本情報:\")\n","    print(test.info())\n","    print(\"\\n欠損値の数:\")\n","    print(test.isnull().sum().sort_values(ascending=False))\n","    print(\"\\n統計量:\")\n","    print(test.describe())\n","\n","# 使用例\n","data_summary(test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nWTXI0LZ-FkL","executionInfo":{"status":"ok","timestamp":1736318071903,"user_tz":-540,"elapsed":236,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"329f37f0-a551-4135-f7a6-de1e2cc989ed","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["データの基本情報:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18528 entries, 0 to 18527\n","Data columns (total 22 columns):\n"," #   Column                  Non-Null Count  Dtype  \n","---  ------                  --------------  -----  \n"," 0   id                      18528 non-null  int64  \n"," 1   accommodates            18528 non-null  int64  \n"," 2   amenities               18528 non-null  object \n"," 3   bathrooms               18475 non-null  float64\n"," 4   bed_type                18528 non-null  object \n"," 5   bedrooms                18508 non-null  float64\n"," 6   beds                    18493 non-null  float64\n"," 7   cancellation_policy     18528 non-null  object \n"," 8   city                    18528 non-null  object \n"," 9   cleaning_fee            18528 non-null  object \n"," 10  host_has_profile_pic    18488 non-null  object \n"," 11  host_identity_verified  18488 non-null  object \n"," 12  host_since              18488 non-null  object \n"," 13  instant_bookable        18528 non-null  object \n"," 14  latitude                18528 non-null  float64\n"," 15  longitude               18528 non-null  float64\n"," 16  neighbourhood           16816 non-null  object \n"," 17  number_of_reviews       18528 non-null  int64  \n"," 18  property_type           18528 non-null  object \n"," 19  review_scores_rating    14362 non-null  float64\n"," 20  room_type               18528 non-null  object \n"," 21  zipcode                 18278 non-null  object \n","dtypes: float64(6), int64(3), object(13)\n","memory usage: 3.1+ MB\n","None\n","\n","欠損値の数:\n","review_scores_rating      4166\n","neighbourhood             1712\n","zipcode                    250\n","bathrooms                   53\n","host_has_profile_pic        40\n","host_since                  40\n","host_identity_verified      40\n","beds                        35\n","bedrooms                    20\n","cancellation_policy          0\n","city                         0\n","cleaning_fee                 0\n","accommodates                 0\n","instant_bookable             0\n","latitude                     0\n","longitude                    0\n","bed_type                     0\n","number_of_reviews            0\n","property_type                0\n","amenities                    0\n","room_type                    0\n","id                           0\n","dtype: int64\n","\n","統計量:\n","                 id  accommodates     bathrooms      bedrooms          beds  \\\n","count  18528.000000  18528.000000  18475.000000  18508.000000  18493.000000   \n","mean    9263.500000      3.161863      1.231773      1.267236      1.708160   \n","std     5348.717229      2.155397      0.578944      0.860580      1.243063   \n","min        0.000000      1.000000      0.000000      0.000000      0.000000   \n","25%     4631.750000      2.000000      1.000000      1.000000      1.000000   \n","50%     9263.500000      2.000000      1.000000      1.000000      1.000000   \n","75%    13895.250000      4.000000      1.000000      1.000000      2.000000   \n","max    18527.000000     16.000000      8.000000     10.000000     16.000000   \n","\n","           latitude     longitude  number_of_reviews  review_scores_rating  \n","count  18528.000000  18528.000000       18528.000000          14362.000000  \n","mean      38.431396    -92.562881          20.790425             94.035719  \n","std        3.078096     21.757419          37.457273              7.938919  \n","min       33.343011   -122.510940           0.000000             20.000000  \n","25%       34.126672   -118.344098           1.000000             92.000000  \n","50%       40.658229    -77.000323           6.000000             96.000000  \n","75%       40.745958    -73.954432          23.000000            100.000000  \n","max       42.390248    -70.985047         451.000000            100.000000  \n"]}]},{"cell_type":"markdown","source":["###それぞれの列に含まれるユニークな値を確認する"],"metadata":{"id":"Jp2zOcw0AOH-"}},{"cell_type":"code","source":["# 各カラムのユニークな値の数を確認\n","unique_values = test.nunique().sort_values(ascending=False)\n","print(unique_values)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O5CIXmrhAM73","executionInfo":{"status":"ok","timestamp":1736318102751,"user_tz":-540,"elapsed":253,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"7e37b009-6858-4060-f860-9b233c156495","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["id                        18528\n","longitude                 18528\n","latitude                  18528\n","amenities                 17722\n","host_since                 2772\n","zipcode                     652\n","neighbourhood               531\n","number_of_reviews           278\n","review_scores_rating         47\n","property_type                27\n","beds                         17\n","bathrooms                    17\n","accommodates                 16\n","bedrooms                     11\n","city                          6\n","cancellation_policy           5\n","bed_type                      5\n","room_type                     3\n","cleaning_fee                  2\n","host_has_profile_pic          2\n","instant_bookable              2\n","host_identity_verified        2\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["### カラム別にユニークな値を確認する"],"metadata":{"id":"yk9g-viRCkzM"}},{"cell_type":"code","source":["# カラム名を指定してユニーク値を確認する関数\n","def check_unique_values(column_name):\n","    if column_name not in test.columns:\n","        print(f\"{column_name} はデータフレームに存在しません。\")\n","        return\n","    unique_values = test[column_name].unique()\n","    unique_count = len(unique_values)\n","    print(f\"{column_name}: {unique_count} unique values\")\n","    if unique_count > 40:\n","        print(f\"First 10 values: {unique_values[:10]}\")\n","    else:\n","        print(f\"All values: {unique_values}\")\n","\n","# 例: カラムのユニーク値を確認\n","check_unique_values('zipcode')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T3un2RpoCYkS","executionInfo":{"status":"ok","timestamp":1736328390463,"user_tz":-540,"elapsed":273,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"e87fc3f5-ad88-4b9d-9328-68d7a60ecb23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["zipcode: 653 unique values\n","First 10 values: ['02114' '90046' '11249.0' '11216' '91604' '90025' '20020' '90007' '94127'\n"," '20002']\n"]}]},{"cell_type":"markdown","source":["### 1. amenitiesから設備リストを作成し上位の設備が含まれる場合カウントする"],"metadata":{"id":"T21cfpFSK7HW"}},{"cell_type":"code","source":["# カンマ区切りのリストを分割し、設備リストを作成\n","test['amenities_list'] = test['amenities'].apply(lambda x: x.replace('\"', '').replace('{', '').replace('}', '').split(','))\n","\n","# 上位10個の頻出設備を抽出\n","from collections import Counter\n","all_amenities = [item for sublist in test['amenities_list'] for item in sublist]\n","most_common_amenities = [item[0] for item in Counter(all_amenities).most_common(10)]\n","\n","# 上位10の設備が含まれている場合のみカウント\n","test['num_top_amenities'] = test['amenities_list'].apply(lambda x: sum(1 for amenity in x if amenity in most_common_amenities))\n","\n","# 確認\n","print(\"Top 10 Most Common Amenities:\", most_common_amenities)\n","test[['amenities_list', 'num_top_amenities']].head()\n","\n","test = test.drop(columns=['amenities', 'amenities_list'])\n","\n","test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":361},"collapsed":true,"id":"DFt4egkuKesX","executionInfo":{"status":"ok","timestamp":1736580549689,"user_tz":-540,"elapsed":276,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"76d02f3c-5d6d-4a51-d2e9-4b27e617edef"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Top 10 Most Common Amenities: ['Wireless Internet', 'Kitchen', 'Heating', 'Essentials', 'Smoke detector', 'Air conditioning', 'TV', 'Shampoo', 'Hangers', 'Carbon monoxide detector']\n"]},{"output_type":"execute_result","data":{"text/plain":["   id  accommodates  bathrooms  bed_type  bedrooms  beds cancellation_policy  \\\n","0   0             6        2.0  Real Bed       2.0   2.0              strict   \n","1   1             3        1.0  Real Bed       1.0   1.0            moderate   \n","2   2             2        1.0  Real Bed       0.0   1.0            flexible   \n","3   3             4        1.0  Real Bed       1.0   2.0              strict   \n","4   4             3        1.5  Real Bed       1.0   2.0              strict   \n","\n","     city cleaning_fee first_review  ... last_review   latitude   longitude  \\\n","0  Boston            t   2017-01-09  ...  2017-09-25  42.359278  -71.069962   \n","1      LA            t   2016-08-17  ...  2017-05-02  34.084747 -118.367355   \n","2     NYC            f          NaN  ...         NaN  40.720541  -73.959192   \n","3     NYC            f          NaN  ...         NaN  40.681117  -73.944091   \n","4      LA            t   2015-08-01  ...  2016-09-11  34.150995 -118.409359   \n","\n","        neighbourhood number_of_reviews property_type  review_scores_rating  \\\n","0         Beacon Hill                58         House                  90.0   \n","1      West Hollywood                 4    Guesthouse                 100.0   \n","2        Williamsburg                 0     Apartment                   NaN   \n","3  Bedford-Stuyvesant                 0     Apartment                   NaN   \n","4                 NaN                 6          Loft                  92.0   \n","\n","         room_type  zipcode  num_top_amenities  \n","0  Entire home/apt    02114                 10  \n","1  Entire home/apt    90046                 10  \n","2     Private room  11249.0                  7  \n","3  Entire home/apt    11216                 10  \n","4  Entire home/apt    91604                  7  \n","\n","[5 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-3e2cb52f-7516-495f-9a34-b77327dfcf96\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>accommodates</th>\n","      <th>bathrooms</th>\n","      <th>bed_type</th>\n","      <th>bedrooms</th>\n","      <th>beds</th>\n","      <th>cancellation_policy</th>\n","      <th>city</th>\n","      <th>cleaning_fee</th>\n","      <th>first_review</th>\n","      <th>...</th>\n","      <th>last_review</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>neighbourhood</th>\n","      <th>number_of_reviews</th>\n","      <th>property_type</th>\n","      <th>review_scores_rating</th>\n","      <th>room_type</th>\n","      <th>zipcode</th>\n","      <th>num_top_amenities</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>2.0</td>\n","      <td>Real Bed</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>strict</td>\n","      <td>Boston</td>\n","      <td>t</td>\n","      <td>2017-01-09</td>\n","      <td>...</td>\n","      <td>2017-09-25</td>\n","      <td>42.359278</td>\n","      <td>-71.069962</td>\n","      <td>Beacon Hill</td>\n","      <td>58</td>\n","      <td>House</td>\n","      <td>90.0</td>\n","      <td>Entire home/apt</td>\n","      <td>02114</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>moderate</td>\n","      <td>LA</td>\n","      <td>t</td>\n","      <td>2016-08-17</td>\n","      <td>...</td>\n","      <td>2017-05-02</td>\n","      <td>34.084747</td>\n","      <td>-118.367355</td>\n","      <td>West Hollywood</td>\n","      <td>4</td>\n","      <td>Guesthouse</td>\n","      <td>100.0</td>\n","      <td>Entire home/apt</td>\n","      <td>90046</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>flexible</td>\n","      <td>NYC</td>\n","      <td>f</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>40.720541</td>\n","      <td>-73.959192</td>\n","      <td>Williamsburg</td>\n","      <td>0</td>\n","      <td>Apartment</td>\n","      <td>NaN</td>\n","      <td>Private room</td>\n","      <td>11249.0</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>strict</td>\n","      <td>NYC</td>\n","      <td>f</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>40.681117</td>\n","      <td>-73.944091</td>\n","      <td>Bedford-Stuyvesant</td>\n","      <td>0</td>\n","      <td>Apartment</td>\n","      <td>NaN</td>\n","      <td>Entire home/apt</td>\n","      <td>11216</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>1.5</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>strict</td>\n","      <td>LA</td>\n","      <td>t</td>\n","      <td>2015-08-01</td>\n","      <td>...</td>\n","      <td>2016-09-11</td>\n","      <td>34.150995</td>\n","      <td>-118.409359</td>\n","      <td>NaN</td>\n","      <td>6</td>\n","      <td>Loft</td>\n","      <td>92.0</td>\n","      <td>Entire home/apt</td>\n","      <td>91604</td>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e2cb52f-7516-495f-9a34-b77327dfcf96')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3e2cb52f-7516-495f-9a34-b77327dfcf96 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3e2cb52f-7516-495f-9a34-b77327dfcf96');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-227a242c-e762-4bc3-873f-1454ee1ade5a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-227a242c-e762-4bc3-873f-1454ee1ade5a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-227a242c-e762-4bc3-873f-1454ee1ade5a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["### 2. ホスト登録(host_since)からの運営年数を計算する"],"metadata":{"id":"jZ9rB0NXO6GI"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# 現在の年を取得\n","current_year = pd.to_datetime('today').year\n","\n","# 日付データをdatetime型に変換（エラー回避のため）\n","test['host_since'] = pd.to_datetime(test['host_since'], errors='coerce')\n","\n","# ホストの運営年数を計算（年単位の小数で表現）\n","test['host_experience_years'] = test['host_since'].apply(\n","    lambda x: round(current_year - x.year + ((365 - x.dayofyear) / 365), 4) if pd.notnull(x) else np.nan\n",")\n","\n","# 結果の確認\n","test[['host_since', 'host_experience_years']].head()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"collapsed":true,"id":"jMXW4BuBLiVF","executionInfo":{"status":"ok","timestamp":1736580558658,"user_tz":-540,"elapsed":266,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"1210da64-9b4b-4906-a587-0aa36a332d73"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  host_since  host_experience_years\n","0 2016-08-23                 9.3534\n","1 2014-09-03                11.3260\n","2 2012-10-17                13.2027\n","3 2013-01-23                12.9370\n","4 2014-12-28                11.0082"],"text/html":["\n","  <div id=\"df-1af7ccc9-7d4a-4236-a774-a029a1463345\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>host_since</th>\n","      <th>host_experience_years</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2016-08-23</td>\n","      <td>9.3534</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2014-09-03</td>\n","      <td>11.3260</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2012-10-17</td>\n","      <td>13.2027</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-23</td>\n","      <td>12.9370</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2014-12-28</td>\n","      <td>11.0082</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1af7ccc9-7d4a-4236-a774-a029a1463345')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1af7ccc9-7d4a-4236-a774-a029a1463345 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1af7ccc9-7d4a-4236-a774-a029a1463345');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-86cfe610-93e9-4d9a-9fa5-ff4f6c0d93f6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-86cfe610-93e9-4d9a-9fa5-ff4f6c0d93f6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-86cfe610-93e9-4d9a-9fa5-ff4f6c0d93f6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"test[['host_since', 'host_experience_years']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"host_since\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2012-10-17 00:00:00\",\n        \"max\": \"2016-08-23 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2014-09-03 00:00:00\",\n          \"2014-12-28 00:00:00\",\n          \"2012-10-17 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"host_experience_years\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5670646151323815,\n        \"min\": 9.3534,\n        \"max\": 13.2027,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          11.326,\n          11.0082,\n          13.2027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["### 3. 緯度と経度から欠損しているZIPcodeを保管する"],"metadata":{"id":"47dF4vzeUcfP"}},{"cell_type":"code","source":["from sklearn.neighbors import NearestNeighbors\n","import numpy as np\n","import pandas as pd\n","\n","# zipcodeの欠損を補完する関数\n","def fill_missing_zipcodes(df):\n","    # 欠損していないデータの抽出\n","    non_missing_zipcodes = df[df['zipcode'].notna()].copy()\n","    missing_zipcodes = df[df['zipcode'].isna()].copy()\n","\n","    # 緯度・経度データの抽出\n","    lat_long = non_missing_zipcodes[['latitude', 'longitude']].values\n","    zip_codes = non_missing_zipcodes['zipcode'].values\n","\n","    # 欠損データの緯度・経度\n","    lat_long_missing = missing_zipcodes[['latitude', 'longitude']].values\n","\n","    # 最近傍法で最近のzipcodeを検索\n","    nn = NearestNeighbors(n_neighbors=1, metric='euclidean')\n","    nn.fit(lat_long)\n","    nearest_neighbors = nn.kneighbors(lat_long_missing, return_distance=False)\n","\n","    # 最近傍からzipcodeを補完\n","    filled_zipcodes = [zip_codes[i[0]] for i in nearest_neighbors]\n","    missing_zipcodes['zipcode'] = filled_zipcodes\n","\n","    # 元のデータフレームを更新\n","    df.update(missing_zipcodes)\n","    return df\n","\n","# 関数を適用して欠損補完\n","test = fill_missing_zipcodes(test)\n","\n","# 補完結果の確認\n","test['zipcode'].isna().sum()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tU7yzZp-UdFF","executionInfo":{"status":"ok","timestamp":1736580569164,"user_tz":-540,"elapsed":2983,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"06a501b6-f72e-45e2-e5b6-74bcf55d2cf5"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["### 4. 緯度と経度でneighbourhoodの欠損値を保管する"],"metadata":{"id":"CYqf-3vNXDPn"}},{"cell_type":"code","source":["# 緯度経度で`neighbourhood`の欠損を補完する関数 (修正済み)\n","from sklearn.neighbors import NearestNeighbors\n","import numpy as np\n","import pandas as pd\n","\n","def fill_neighbourhood_with_lat_lon(df):\n","    # 欠損していないデータを用意\n","    non_missing_neighbourhood = df[df['neighbourhood'].notna()]\n","    missing_neighbourhood = df[df['neighbourhood'].isna()]\n","\n","    # 緯度・経度データと`neighbourhood`の準備\n","    lat_lon = non_missing_neighbourhood[['latitude', 'longitude']].values\n","    neighbourhood_values = non_missing_neighbourhood['neighbourhood'].values\n","\n","    # 欠損データの緯度・経度\n","    lat_lon_missing = missing_neighbourhood[['latitude', 'longitude']].values\n","\n","    # 最近傍法モデルの構築\n","    nn = NearestNeighbors(n_neighbors=1, metric='euclidean')\n","    nn.fit(lat_lon)\n","\n","    # 最近のデータポイントのインデックスを取得\n","    nearest_neighbors = nn.kneighbors(lat_lon_missing, return_distance=False)\n","\n","    # 補完実行 (修正ポイント)\n","    filled_neighbourhoods = [neighbourhood_values[i[0]] for i in nearest_neighbors]\n","    df.loc[df['neighbourhood'].isna(), 'neighbourhood'] = filled_neighbourhoods\n","\n","    return df\n","\n","# 関数の適用\n","test = fill_neighbourhood_with_lat_lon(test)\n","\n","# 補完後の欠損確認\n","print(\"欠損値の残り:\", test['neighbourhood'].isna().sum())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FDZAGij0by00","executionInfo":{"status":"ok","timestamp":1736580576665,"user_tz":-540,"elapsed":260,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"bd28bcaf-7638-4a40-d0ef-80f104dc13d4"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["欠損値の残り: 0\n"]}]},{"cell_type":"markdown","source":["### 5. cancellation_policyには順序エンコーディングを適用する"],"metadata":{"id":"_6vKoY3Gb-2t"}},{"cell_type":"code","source":["# 順序エンコーディングのマッピング\n","cancellation_policy_order = {\n","    'flexible': 0,\n","    'moderate': 1,\n","    'strict': 2,\n","    'super_strict_30': 3,\n","    'super_strict_60': 4\n","}\n","\n","# 順序エンコーディングの適用\n","test['cancellation_policy_encoded'] = test['cancellation_policy'].map(cancellation_policy_order)\n","\n","test = test.drop(columns=['cancellation_policy'])\n","\n","# すべての行を表示する設定\n","pd.set_option('display.max_columns', None)\n","\n","# 確認\n","test.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"sfKqyHw6hzCl","executionInfo":{"status":"ok","timestamp":1736580581677,"user_tz":-540,"elapsed":272,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"dc0cb7f5-98c6-4bfe-828c-ffc18a67f3fc","collapsed":true},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   id  accommodates  bathrooms  bed_type  bedrooms  beds    city cleaning_fee  \\\n","0   0             6        2.0  Real Bed       2.0   2.0  Boston            t   \n","1   1             3        1.0  Real Bed       1.0   1.0      LA            t   \n","2   2             2        1.0  Real Bed       0.0   1.0     NYC            f   \n","3   3             4        1.0  Real Bed       1.0   2.0     NYC            f   \n","4   4             3        1.5  Real Bed       1.0   2.0      LA            t   \n","\n","  first_review host_has_profile_pic host_identity_verified host_response_rate  \\\n","0   2017-01-09                    t                      f               100%   \n","1   2016-08-17                    t                      t               100%   \n","2          NaN                    t                      t               100%   \n","3          NaN                    t                      t                NaN   \n","4   2015-08-01                    t                      t               100%   \n","\n","  host_since instant_bookable last_review   latitude   longitude  \\\n","0 2016-08-23                t  2017-09-25  42.359278  -71.069962   \n","1 2014-09-03                f  2017-05-02  34.084747 -118.367355   \n","2 2012-10-17                f         NaN  40.720541  -73.959192   \n","3 2013-01-23                f         NaN  40.681117  -73.944091   \n","4 2014-12-28                f  2016-09-11  34.150995 -118.409359   \n","\n","        neighbourhood  number_of_reviews property_type  review_scores_rating  \\\n","0         Beacon Hill                 58         House                  90.0   \n","1      West Hollywood                  4    Guesthouse                 100.0   \n","2        Williamsburg                  0     Apartment                   NaN   \n","3  Bedford-Stuyvesant                  0     Apartment                   NaN   \n","4         Studio City                  6          Loft                  92.0   \n","\n","         room_type  zipcode  num_top_amenities  host_experience_years  \\\n","0  Entire home/apt    02114                 10                 9.3534   \n","1  Entire home/apt    90046                 10                11.3260   \n","2     Private room  11249.0                  7                13.2027   \n","3  Entire home/apt    11216                 10                12.9370   \n","4  Entire home/apt    91604                  7                11.0082   \n","\n","   cancellation_policy_encoded  \n","0                            2  \n","1                            1  \n","2                            0  \n","3                            2  \n","4                            2  "],"text/html":["\n","  <div id=\"df-86156af0-87ef-4206-af01-7c60803ff76a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>accommodates</th>\n","      <th>bathrooms</th>\n","      <th>bed_type</th>\n","      <th>bedrooms</th>\n","      <th>beds</th>\n","      <th>city</th>\n","      <th>cleaning_fee</th>\n","      <th>first_review</th>\n","      <th>host_has_profile_pic</th>\n","      <th>host_identity_verified</th>\n","      <th>host_response_rate</th>\n","      <th>host_since</th>\n","      <th>instant_bookable</th>\n","      <th>last_review</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>neighbourhood</th>\n","      <th>number_of_reviews</th>\n","      <th>property_type</th>\n","      <th>review_scores_rating</th>\n","      <th>room_type</th>\n","      <th>zipcode</th>\n","      <th>num_top_amenities</th>\n","      <th>host_experience_years</th>\n","      <th>cancellation_policy_encoded</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>2.0</td>\n","      <td>Real Bed</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>Boston</td>\n","      <td>t</td>\n","      <td>2017-01-09</td>\n","      <td>t</td>\n","      <td>f</td>\n","      <td>100%</td>\n","      <td>2016-08-23</td>\n","      <td>t</td>\n","      <td>2017-09-25</td>\n","      <td>42.359278</td>\n","      <td>-71.069962</td>\n","      <td>Beacon Hill</td>\n","      <td>58</td>\n","      <td>House</td>\n","      <td>90.0</td>\n","      <td>Entire home/apt</td>\n","      <td>02114</td>\n","      <td>10</td>\n","      <td>9.3534</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>LA</td>\n","      <td>t</td>\n","      <td>2016-08-17</td>\n","      <td>t</td>\n","      <td>t</td>\n","      <td>100%</td>\n","      <td>2014-09-03</td>\n","      <td>f</td>\n","      <td>2017-05-02</td>\n","      <td>34.084747</td>\n","      <td>-118.367355</td>\n","      <td>West Hollywood</td>\n","      <td>4</td>\n","      <td>Guesthouse</td>\n","      <td>100.0</td>\n","      <td>Entire home/apt</td>\n","      <td>90046</td>\n","      <td>10</td>\n","      <td>11.3260</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>NYC</td>\n","      <td>f</td>\n","      <td>NaN</td>\n","      <td>t</td>\n","      <td>t</td>\n","      <td>100%</td>\n","      <td>2012-10-17</td>\n","      <td>f</td>\n","      <td>NaN</td>\n","      <td>40.720541</td>\n","      <td>-73.959192</td>\n","      <td>Williamsburg</td>\n","      <td>0</td>\n","      <td>Apartment</td>\n","      <td>NaN</td>\n","      <td>Private room</td>\n","      <td>11249.0</td>\n","      <td>7</td>\n","      <td>13.2027</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>1.0</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>NYC</td>\n","      <td>f</td>\n","      <td>NaN</td>\n","      <td>t</td>\n","      <td>t</td>\n","      <td>NaN</td>\n","      <td>2013-01-23</td>\n","      <td>f</td>\n","      <td>NaN</td>\n","      <td>40.681117</td>\n","      <td>-73.944091</td>\n","      <td>Bedford-Stuyvesant</td>\n","      <td>0</td>\n","      <td>Apartment</td>\n","      <td>NaN</td>\n","      <td>Entire home/apt</td>\n","      <td>11216</td>\n","      <td>10</td>\n","      <td>12.9370</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>1.5</td>\n","      <td>Real Bed</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>LA</td>\n","      <td>t</td>\n","      <td>2015-08-01</td>\n","      <td>t</td>\n","      <td>t</td>\n","      <td>100%</td>\n","      <td>2014-12-28</td>\n","      <td>f</td>\n","      <td>2016-09-11</td>\n","      <td>34.150995</td>\n","      <td>-118.409359</td>\n","      <td>Studio City</td>\n","      <td>6</td>\n","      <td>Loft</td>\n","      <td>92.0</td>\n","      <td>Entire home/apt</td>\n","      <td>91604</td>\n","      <td>7</td>\n","      <td>11.0082</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86156af0-87ef-4206-af01-7c60803ff76a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-86156af0-87ef-4206-af01-7c60803ff76a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-86156af0-87ef-4206-af01-7c60803ff76a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-809c1b80-8768-4dcf-93ca-ba92beec3d52\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-809c1b80-8768-4dcf-93ca-ba92beec3d52')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-809c1b80-8768-4dcf-93ca-ba92beec3d52 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test"}},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["### 6. review_scoresをバケット化する"],"metadata":{"id":"KxGtZawKID3w"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# バケット化の関数定義\n","def bucketize_review_scores(rating):\n","    if pd.isnull(rating):\n","        return -1  # 欠損値は特別なカテゴリに\n","    elif rating <= 60:\n","        return 0  # 低評価\n","    elif rating <= 80:\n","        return 1  # 中評価\n","    else:\n","        return 2  # 高評価\n","\n","# バケット化の適用\n","test['review_scores_rating_bucket'] = test['review_scores_rating'].apply(bucketize_review_scores)\n","\n","# バケット化結果の確認\n","test['review_scores_rating_bucket'].value_counts()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"hpGzrwI1IDKF","executionInfo":{"status":"ok","timestamp":1736580586879,"user_tz":-540,"elapsed":254,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"3be2ec38-eba0-4fa5-ad2e-de24ac7275a5","collapsed":true},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["review_scores_rating_bucket\n"," 2    13369\n","-1     4166\n"," 1      815\n"," 0      178\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>review_scores_rating_bucket</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>13369</td>\n","    </tr>\n","    <tr>\n","      <th>-1</th>\n","      <td>4166</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>815</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>178</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["### 7.cityとneighbourhoodでグループ化し平均価格を計算する"],"metadata":{"id":"2NGWnPVCKpYZ"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import KFold\n","\n","# データの読み込み\n","file_path_train = '/content/drive/My Drive/hotel_service/data/train_0111_1.csv'\n","train = pd.read_csv(file_path_train, low_memory=False)\n","\n","# 5分割のKFold設定\n","kf = KFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# ターゲットエンコーディング用カラムの初期化\n","train['city_neighbourhood_avg_price'] = 0\n","\n","# ======= 訓練データのターゲットエンコーディング =======\n","for train_idx, val_idx in kf.split(train):\n","    train_fold = train.iloc[train_idx]\n","    val_fold = train.iloc[val_idx]\n","\n","    # グループごとの平均価格を計算\n","    group_means = train_fold.groupby(['city', 'neighbourhood'])['y'].mean()\n","\n","    # バリデーションデータに平均価格を適用\n","    val_fold['city_neighbourhood_avg_price'] = val_fold[['city', 'neighbourhood']].apply(\n","        lambda row: group_means.get((row['city'], row['neighbourhood']), train['y'].mean()), axis=1\n","    )\n","\n","    # 結果を元の訓練データに反映\n","    train.loc[val_idx, 'city_neighbourhood_avg_price'] = val_fold['city_neighbourhood_avg_price']\n","\n","# 欠損値の補完（訓練データ）\n","train['city_neighbourhood_avg_price'].fillna(train['y'].mean(), inplace=True)\n","\n","# ======= テストデータへのターゲットエンコーディング適用 =======\n","# 訓練データ全体の平均を使ってエンコード\n","group_means_train = train.groupby(['city', 'neighbourhood'])['y'].mean()\n","\n","# テストデータに平均価格を適用（該当しない場合、訓練データ全体の平均で補完）\n","test['city_neighbourhood_avg_price'] = test[['city', 'neighbourhood']].apply(\n","    lambda row: group_means_train.get((row['city'], row['neighbourhood']), train['y'].mean()), axis=1\n",")\n","\n","# テストデータの欠損値の補完\n","test['city_neighbourhood_avg_price'].fillna(train['y'].mean(), inplace=True)\n","\n","# 結果の確認\n","print(test[['city', 'neighbourhood', 'city_neighbourhood_avg_price']].head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"jvzPfwJT4ocb","executionInfo":{"status":"ok","timestamp":1736580628354,"user_tz":-540,"elapsed":16081,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"105c931f-318e-4478-800d-009fc4993220"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-10-3211b0502a69>:23: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  val_fold['city_neighbourhood_avg_price'] = val_fold[['city', 'neighbourhood']].apply(\n","<ipython-input-10-3211b0502a69>:28: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[184.02734839 101.66818874 178.67901235 ... 188.95945946  88.35135135\n","  90.82051282]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  train.loc[val_idx, 'city_neighbourhood_avg_price'] = val_fold['city_neighbourhood_avg_price']\n","<ipython-input-10-3211b0502a69>:23: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  val_fold['city_neighbourhood_avg_price'] = val_fold[['city', 'neighbourhood']].apply(\n","<ipython-input-10-3211b0502a69>:23: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  val_fold['city_neighbourhood_avg_price'] = val_fold[['city', 'neighbourhood']].apply(\n","<ipython-input-10-3211b0502a69>:23: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  val_fold['city_neighbourhood_avg_price'] = val_fold[['city', 'neighbourhood']].apply(\n","<ipython-input-10-3211b0502a69>:23: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  val_fold['city_neighbourhood_avg_price'] = val_fold[['city', 'neighbourhood']].apply(\n","<ipython-input-10-3211b0502a69>:31: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  train['city_neighbourhood_avg_price'].fillna(train['y'].mean(), inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["     city       neighbourhood  city_neighbourhood_avg_price\n","0  Boston         Beacon Hill                    201.766234\n","1      LA      West Hollywood                    157.736446\n","2     NYC        Williamsburg                    138.342622\n","3     NYC  Bedford-Stuyvesant                    101.388235\n","4      LA         Studio City                    203.809249\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-3211b0502a69>:43: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  test['city_neighbourhood_avg_price'].fillna(train['y'].mean(), inplace=True)\n"]}]},{"cell_type":"markdown","source":["### 8. zipcode の最初の3桁でグループ化し、平均的な価格を計算する"],"metadata":{"id":"Z0iM_FuNusBZ"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import KFold\n","\n","# 'zipcode'の最初の3桁を新しいカラムとして作成（データの一貫性を確保）\n","train['zipcode3'] = train['zipcode'].astype(str).str[:3]\n","test['zipcode3'] = test['zipcode'].astype(str).str[:3]\n","\n","# ターゲットエンコーディング用カラムの初期化\n","train['zipcode3_avg_price'] = 0\n","\n","# 5分割のKFold設定\n","kf = KFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# ===== クロスバリデーションでターゲットエンコーディング (訓練データ) =====\n","for train_idx, val_idx in kf.split(train):\n","    train_fold = train.iloc[train_idx].copy()\n","    val_fold = train.iloc[val_idx].copy()\n","\n","    # グループごとの平均価格を計算（訓練データの一部で計算）\n","    group_means = train_fold.groupby('zipcode3')['y'].mean()\n","\n","    # バリデーションデータに平均価格を適用\n","    val_fold['zipcode3_avg_price'] = val_fold['zipcode3'].map(group_means)\n","\n","    # 欠損値補完（バリデーションデータ内での補完）\n","    val_fold['zipcode3_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","\n","    # 元の訓練データに反映\n","    train.loc[val_idx, 'zipcode3_avg_price'] = val_fold['zipcode3_avg_price']\n","\n","# ===== テストデータへのターゲットエンコーディングの適用 =====\n","# 訓練データ全体のグループ平均でエンコード\n","group_means_final = train.groupby('zipcode3')['y'].mean()\n","\n","# テストデータに対して平均価格を適用（該当しない場合、訓練データ全体の平均で補完）\n","test['zipcode3_avg_price'] = test['zipcode3'].map(group_means_final)\n","test['zipcode3_avg_price'].fillna(train['y'].mean(), inplace=True)\n","\n","# ===== カラム削除（データの一貫性のため、zipcode3カラム削除） =====\n","test.drop(columns=['zipcode3'], inplace=True)\n","\n","# 結果の確認\n","print(\"Train Sample:\")\n","print(train[['zipcode3_avg_price']].head())\n","\n","print(\"\\nTest Sample:\")\n","print(test[['zipcode3_avg_price']].head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"ossRCaPkTeAP","executionInfo":{"status":"ok","timestamp":1736580635698,"user_tz":-540,"elapsed":472,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"65eee524-a891-4f34-9e5f-7ae0bf6ceef0"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-11-ad0c41f2d2f7>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['zipcode3_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-11-ad0c41f2d2f7>:29: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[180.10947489 117.27767494 180.10947489 ... 229.16363157 144.4619469\n"," 117.27767494]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  train.loc[val_idx, 'zipcode3_avg_price'] = val_fold['zipcode3_avg_price']\n","<ipython-input-11-ad0c41f2d2f7>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['zipcode3_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-11-ad0c41f2d2f7>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['zipcode3_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-11-ad0c41f2d2f7>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['zipcode3_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-11-ad0c41f2d2f7>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['zipcode3_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-11-ad0c41f2d2f7>:37: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  test['zipcode3_avg_price'].fillna(train['y'].mean(), inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["Train Sample:\n","   zipcode3_avg_price\n","0          122.335354\n","1          217.374443\n","2          117.185048\n","3          227.731430\n","4          180.109475\n","\n","Test Sample:\n","   zipcode3_avg_price\n","0          164.319652\n","1          143.117290\n","2          117.165497\n","3          117.165497\n","4          127.524316\n"]}]},{"cell_type":"markdown","source":["### 9. bedroomsとaccommodatesの組み合わせごとに平均価格を計算"],"metadata":{"id":"zvkk1V8mdIlt"}},{"cell_type":"code","source":["from sklearn.model_selection import KFold\n","import pandas as pd\n","\n","# 新しい特徴量の初期化\n","train['bedrooms_accommodates_avg_price'] = 0\n","\n","# 5分割のKFold設定\n","kf = KFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# ===== クロスバリデーションでターゲットエンコーディング (訓練データ) =====\n","for train_idx, val_idx in kf.split(train):\n","    train_fold = train.iloc[train_idx].copy()\n","    val_fold = train.iloc[val_idx].copy()\n","\n","    # グループごとの平均価格を計算\n","    group_means = train_fold.groupby(['bedrooms', 'accommodates'])['y'].mean()\n","\n","    # バリデーションデータに平均価格を適用（データリークを防止）\n","    val_fold['bedrooms_accommodates_avg_price'] = val_fold.apply(\n","        lambda row: group_means.get((row['bedrooms'], row['accommodates']), train_fold['y'].mean()), axis=1\n","    )\n","\n","    # 欠損値補完（バリデーションデータ内の平均で補完）\n","    val_fold['bedrooms_accommodates_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","\n","    # 元の訓練データに反映\n","    train.loc[val_idx, 'bedrooms_accommodates_avg_price'] = val_fold['bedrooms_accommodates_avg_price']\n","\n","# ===== テストデータへのターゲットエンコーディングの適用 =====\n","# 訓練データ全体のグループごとの平均価格を計算\n","group_means_final = train.groupby(['bedrooms', 'accommodates'])['y'].mean()\n","\n","# テストデータに対して平均価格を適用（存在しない場合は訓練データ全体の平均で補完）\n","test['bedrooms_accommodates_avg_price'] = test.apply(\n","    lambda row: group_means_final.get((row['bedrooms'], row['accommodates']), train['y'].mean()), axis=1\n",")\n","\n","# 欠損値補完（全体の平均価格で補完）\n","test['bedrooms_accommodates_avg_price'].fillna(train['y'].mean(), inplace=True)\n","\n","# 結果の確認\n","print(\"Train Sample:\")\n","print(train[['bedrooms', 'accommodates', 'bedrooms_accommodates_avg_price']].head())\n","\n","print(\"\\nTest Sample:\")\n","print(test[['bedrooms', 'accommodates', 'bedrooms_accommodates_avg_price']].head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"VosKH67MUjxU","executionInfo":{"status":"ok","timestamp":1736580657762,"user_tz":-540,"elapsed":13673,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"44695767-58b9-442d-d80d-80de1407380c"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-12-fc0e4102ce2d>:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['bedrooms_accommodates_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-12-fc0e4102ce2d>:27: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[107.08477285 107.08477285 161.59079016 ... 231.93202472 537.94326241\n"," 244.14956245]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  train.loc[val_idx, 'bedrooms_accommodates_avg_price'] = val_fold['bedrooms_accommodates_avg_price']\n","<ipython-input-12-fc0e4102ce2d>:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['bedrooms_accommodates_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-12-fc0e4102ce2d>:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['bedrooms_accommodates_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-12-fc0e4102ce2d>:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['bedrooms_accommodates_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n","<ipython-input-12-fc0e4102ce2d>:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  val_fold['bedrooms_accommodates_avg_price'].fillna(train_fold['y'].mean(), inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["Train Sample:\n","   bedrooms  accommodates  bedrooms_accommodates_avg_price\n","0       1.0             6                       167.840256\n","1       1.0             2                       107.559683\n","2       1.0             2                       107.590912\n","3       1.0             2                       107.440295\n","4       1.0             2                       107.084773\n","\n","Test Sample:\n","   bedrooms  accommodates  bedrooms_accommodates_avg_price\n","0       2.0             6                       257.654731\n","1       1.0             3                       136.681592\n","2       0.0             2                       135.746525\n","3       1.0             4                       160.990356\n","4       1.0             3                       136.681592\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-12-fc0e4102ce2d>:39: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  test['bedrooms_accommodates_avg_price'].fillna(train['y'].mean(), inplace=True)\n"]}]},{"cell_type":"markdown","source":["### 10. first_viewからlast_viewを引いて新しい特徴量を作成する"],"metadata":{"id":"3sWoXGwdfEN9"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# 日付型への変換（エラー回避のため、coerceで変換できない値をNaTに変換）\n","test['first_review'] = pd.to_datetime(test['first_review'], errors='coerce')\n","test['last_review'] = pd.to_datetime(test['last_review'], errors='coerce')\n","\n","# 新しい特徴量：first_reviewからlast_reviewまでの日数\n","test['days_between_reviews'] = (test['last_review'] - test['first_review']).dt.days\n","\n","# 欠損値の補完（例: 0で埋める場合、中央値で埋める場合）\n","test['days_between_reviews'].fillna(0, inplace=True)\n","\n","test = test.drop(columns=['first_review', 'last_review'])\n","\n","# 結果の確認\n","print(test['days_between_reviews'].head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5waZLDu1SGi-","executionInfo":{"status":"ok","timestamp":1736580665320,"user_tz":-540,"elapsed":320,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"73a92338-7236-4228-8bd3-b21d911c64db"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["0    259.0\n","1    258.0\n","2      0.0\n","3      0.0\n","4    407.0\n","Name: days_between_reviews, dtype: float64\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-13-a638f8d8b533>:11: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  test['days_between_reviews'].fillna(0, inplace=True)\n"]}]},{"cell_type":"markdown","source":["### 11. その他の前処理"],"metadata":{"id":"UUGhUhNAhw3E"}},{"cell_type":"code","source":["from datetime import datetime\n","import pandas as pd\n","\n","# 'host_response_rate'を数値型に変換\n","test['host_response_rate'] = test['host_response_rate'].str.replace('%', '').astype(float) / 100\n","\n","# 'host_since' を datetime 型に変換（念のための前処理）\n","test['host_since'] = pd.to_datetime(test['host_since'], errors='coerce')\n","\n","# 年だけを抽出した列を作成\n","test['host_since_year'] = test['host_since'].dt.year\n","\n","# 欠損値の補完（全体の最頻値で補完）\n","test['host_since_year'].fillna(test['host_since_year'].mode()[0], inplace=True)\n","\n","# 最も古い年と新しい年を表示\n","oldest_year = test['host_since_year'].min()\n","newest_year = test['host_since_year'].max()\n","\n","print(f\"最も古い年: {oldest_year}\")\n","print(f\"最も新しい年: {newest_year}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CVKa2su0hvpQ","executionInfo":{"status":"ok","timestamp":1736580674501,"user_tz":-540,"elapsed":237,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"05f7a58d-beb9-4e37-b1cf-b4bb4250e124"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["最も古い年: 2008.0\n","最も新しい年: 2017.0\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-14-f0e16d85233f>:14: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  test['host_since_year'].fillna(test['host_since_year'].mode()[0], inplace=True)\n"]}]},{"cell_type":"markdown","source":["### 宿泊価格が高くなる時期や曜日"],"metadata":{"id":"l5cSX83YM05p"}},{"cell_type":"code","source":["import numpy as np\n","import holidays\n","\n","# 'host_since' を datetime 型に変換\n","test['host_since'] = pd.to_datetime(test['host_since'], errors='coerce')\n","\n","# 年、月、日、曜日を抽出\n","test['host_year'] = test['host_since'].dt.year\n","test['host_month'] = test['host_since'].dt.month\n","test['host_day'] = test['host_since'].dt.day\n","test['host_dayofweek'] = test['host_since'].dt.dayofweek  # 月曜:0, 日曜:6\n","\n","# 週末フラグ (土曜・日曜)\n","test['is_weekend'] = test['host_dayofweek'].isin([5, 6]).astype(int)\n","\n","# 年齢（ホストが何年目か）\n","test['host_age'] = 2025 - test['host_year']\n","\n","# 📊 曜日の周期性エンコーディング (循環エンコーディング)\n","test['host_dayofweek_sin'] = np.sin(2 * np.pi * test['host_dayofweek'] / 7)\n","test['host_dayofweek_cos'] = np.cos(2 * np.pi * test['host_dayofweek'] / 7)\n","\n","# 📊 月の周期性エンコーディング\n","test['host_month_sin'] = np.sin(2 * np.pi * test['host_month'] / 12)\n","test['host_month_cos'] = np.cos(2 * np.pi * test['host_month'] / 12)\n","\n","# ✅ 米国の祝日リストの作成 (データ範囲に合わせて自動化)\n","# ✅ 欠損値を除外して年範囲を取得\n","min_year = int(test.loc[test['host_since'].notna(), 'host_year'].min())\n","max_year = int(test.loc[test['host_since'].notna(), 'host_year'].max())\n","\n","# ✅ holidays.USで祝日リストを作成\n","usa_holidays = holidays.US(years=range(min_year, max_year + 1))\n","\n","\n","# ✅ 祝日フラグの追加\n","test['is_holiday'] = test['host_since'].apply(lambda x: 1 if x in usa_holidays else 0)\n","\n","# ✅ クリスマス休暇と感謝祭を考慮したシーズンフラグの作成\n","def special_season(date):\n","    # クリスマス（12月20日〜12月31日）\n","    if date.month == 12 and date.day >= 20:\n","        return 1\n","    # 新年（1月1日〜1月3日）\n","    elif date.month == 1 and date.day <= 3:\n","        return 1\n","    # 感謝祭（11月第4木曜日前後）\n","    elif date.month == 11 and date.day >= 20 and date.day <= 30:\n","        return 1\n","    # 夏休みシーズン（6月〜8月）\n","    elif date.month in [6, 7, 8]:\n","        return 1\n","    else:\n","        return 0\n","\n","test['is_special_season'] = test['host_since'].apply(special_season)\n","\n","# ✅ データ確認\n","test[['host_since', 'is_weekend', 'is_holiday', 'is_special_season']].head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"SBYxuI8OMY7x","executionInfo":{"status":"ok","timestamp":1736580715416,"user_tz":-540,"elapsed":555,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"ad1737ab-e464-4cdb-bcd9-d05262fa48bb"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  host_since  is_weekend  is_holiday  is_special_season\n","0 2016-08-23           0           0                  1\n","1 2014-09-03           0           0                  0\n","2 2012-10-17           0           0                  0\n","3 2013-01-23           0           0                  0\n","4 2014-12-28           1           0                  1"],"text/html":["\n","  <div id=\"df-9bbac585-ab62-4cad-a329-458b5c707348\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>host_since</th>\n","      <th>is_weekend</th>\n","      <th>is_holiday</th>\n","      <th>is_special_season</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2016-08-23</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2014-09-03</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2012-10-17</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-01-23</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2014-12-28</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bbac585-ab62-4cad-a329-458b5c707348')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9bbac585-ab62-4cad-a329-458b5c707348 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9bbac585-ab62-4cad-a329-458b5c707348');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a3fb554c-f3c3-48b6-93d2-8df0b1efb63f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3fb554c-f3c3-48b6-93d2-8df0b1efb63f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a3fb554c-f3c3-48b6-93d2-8df0b1efb63f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"test[['host_since', 'is_weekend', 'is_holiday', 'is_special_season']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"host_since\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2012-10-17 00:00:00\",\n        \"max\": \"2016-08-23 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2014-09-03 00:00:00\",\n          \"2014-12-28 00:00:00\",\n          \"2012-10-17 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_weekend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_special_season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# データフレームをCSVファイルとして保存\n","file_path = '/content/drive/My Drive/hotel_service/data/test_0111_1.csv'\n","test.to_csv(file_path, index=False)\n","\n","print(f\"データセットを {file_path} に保存しました。\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gus4JNMYx26k","executionInfo":{"status":"ok","timestamp":1736580736861,"user_tz":-540,"elapsed":847,"user":{"displayName":"K Hayakawa","userId":"09387761493852915345"}},"outputId":"ef2cdf93-514c-495e-86d6-7d5254e5d79e"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["データセットを /content/drive/My Drive/hotel_service/data/test_0111_1.csv に保存しました。\n"]}]}]}